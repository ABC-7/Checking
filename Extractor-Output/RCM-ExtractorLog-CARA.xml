<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log SYSTEM "logger.dtd">
<log>
File Measures: 
	Number of req in file = 0
	Number of prim req in file = 29
<FailedRequirement>
</FailedRequirement>
<SucceededRequirement>
	<Requirement>
		ID: [req_48c4:]
		text:  if a confirmation button is available, and the confirmation_yes is pressed, the next confirmation_yes is disabled.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a confirmation button is available, and the confirmation_yes is pressed, the next confirmation_yes is disabled.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((a confirmation button = available) AND (the confirmation_yes = presses))] ==> [(the next confirmation_yes = disabled)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a confirmation button is available
					[2]: if the confirmation_yes is pressed
					[3]: the next confirmation_yes is disabled
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a confirmation button is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the confirmation_yes is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next confirmation_yes is disabled
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a confirmation button is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a confirmation button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the confirmation_yes is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the confirmation_yes
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next confirmation_yes is disabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next confirmation_yes
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: disabled
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_48c2:]
		text:  if a confirmation button is available, and the confirmation_yes is pressed, the manual mode is started.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a confirmation button is available, and the confirmation_yes is pressed, the manual mode is started.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((a confirmation button = available) AND (the confirmation_yes = presses))] ==> [(the manual mode = starts)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a confirmation button is available
					[2]: if the confirmation_yes is pressed
					[3]: the manual mode is started
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a confirmation button is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the confirmation_yes is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the manual mode is started
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a confirmation button is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a confirmation button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the confirmation_yes is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the confirmation_yes
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the manual mode is started
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the manual mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: starts
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_48c6:]
		text:  if a confirmation button is available and the RCMTECHTERM_terminate_auto_control_button is pressed, the next RCMTECHTERM_terminate_auto_control_button is disabled.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a confirmation button is available and the RCMTECHTERM_terminate_auto_control_button is pressed, the next RCMTECHTERM_terminate_auto_control_button is disabled.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((a confirmation button = available) AND (the RCMTECHTERM_terminate_auto_control_button = presses))] ==> [(the next RCMTECHTERM_terminate_auto_control_button = disabled)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a confirmation button is available
					[2]: if the RCMTECHTERM_terminate_auto_control_button is pressed
					[3]: the next RCMTECHTERM_terminate_auto_control_button is disabled
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a confirmation button is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_terminate_auto_control_button is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next RCMTECHTERM_terminate_auto_control_button is disabled
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a confirmation button is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a confirmation button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the RCMTECHTERM_terminate_auto_control_button is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_terminate_auto_control_button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next RCMTECHTERM_terminate_auto_control_button is disabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next RCMTECHTERM_terminate_auto_control_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: disabled
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_16:]
		text:  if a pump is plugged in, and an infusate is ready, and the occlusion line is clear, the RCMTECHTERM_auto_control_mode can be started.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a pump is plugged in, and an infusate is ready, and the occlusion line is clear, the RCMTECHTERM_auto_control_mode can be started.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) AND (R)))] ==> [(S)] )
					MTL-Formula: G( [((a pump = plugs) AND ((an infusate = ready) AND (the occlusion line = clear)))] ==> [(the RCMTECHTERM_auto_control_mode = starts)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a pump is plugged in
					[2]: if an infusate is ready
					[3]: if the occlusion line is clear
					[4]: the RCMTECHTERM_auto_control_mode can be started
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a pump is plugged in
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if an infusate is ready
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the occlusion line is clear
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_auto_control_mode can be started
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a pump is plugged in
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a pump
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: plugs
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if an infusate is ready
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: an infusate
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: ready
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the occlusion line is clear
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the occlusion line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: clear
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Action>
						Text = the RCMTECHTERM_auto_control_mode can be started
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: starts
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_08:]
		text:  if the RCMTECHTERM_air_ok_signal is low, the RCMTECHTERM_auto_control_mode is terminated within 3 sec.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the RCMTECHTERM_air_ok_signal is low, the RCMTECHTERM_auto_control_mode is terminated within 3 sec.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(F{tNONE3}(Q))] )
					MTL-Formula: G( [(the RCMTECHTERM_air_ok_signal = low)] ==> [(F{tNONE3}(the RCMTECHTERM_auto_control_mode = terminates))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_air_ok_signal is low
					[2]: the RCMTECHTERM_auto_control_mode is terminated within 3 sec
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_air_ok_signal is low
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_auto_control_mode is terminated
						SlotType= TimeScope|| Text= within 3 sec
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the RCMTECHTERM_air_ok_signal is low
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_air_ok_signal
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: low
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the RCMTECHTERM_auto_control_mode is terminated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: terminates
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 3
							Unit: sec
							QPRelation: 
						<FormalSemantic>
							TechnicalOperator: NONE
							Value: 3
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_28:]
		text:  if a valid blood pressure is unavailable after at least 180 sec, the manual mode should be triggered.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a valid blood pressure is unavailable after at least 180 sec, the manual mode should be triggered.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(F{t>=180}(P))] ==> [(Q)] )
					MTL-Formula: G( [(F{t>=180}(a valid blood pressure = unavailable))] ==> [(the manual mode = triggers)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a valid blood pressure is unavailable after at least 180 sec
					[2]: the manual mode should be triggered
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a valid blood pressure is unavailable
						SlotType= TimeScope|| Text= after at least 180 sec
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the manual mode should be triggered
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if a valid blood pressure is unavailable
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a valid blood pressure
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: unavailable
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 180
							Unit: sec
							QPRelation: at least 
						<FormalSemantic>
							TechnicalOperator: >=
							Value: 180
							</FormalSemantic>
						<PreElapsedTime>
					</Condition>
					<Action>
						Text = the manual mode should be triggered
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the manual mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: triggers
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c5:]
		text:  when the RCMTECHTERM_override_selection is provided, if the override_yes is pressed, and the arterial line is RCMVAL_corroborated, and the pulse wave is not RCMVAL_corroborated, the next pulse wave is selected.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_override_selection is provided, if the override_yes is pressed, and the arterial line is RCMVAL_corroborated, and the pulse wave is not RCMVAL_corroborated, the next pulse wave is selected.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [([(P)] ==> [((Q) AND ((R) AND (S)))])] ==> [(T)] )
					MTL-Formula: G( [([(the RCMTECHTERM_override_selection = provides)] ==> [((the override_yes = presses) AND ((the arterial line = RCMVAL_corroborated) AND (the pulse wave = not#$@$#RCMVAL_corroborated)))])] ==> [(the next pulse wave = selects)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_override_selection is provided
					[2]: if the override_yes is pressed
					[3]: if the arterial line is RCMVAL_corroborated
					[4]: if the pulse wave is not RCMVAL_corroborated
					[5]: the next pulse wave is selected
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_override_selection is provided
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the override_yes is pressed
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is RCMVAL_corroborated
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave is not RCMVAL_corroborated
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the next pulse wave is selected
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the override_yes is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the override_yes
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the arterial line is RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the arterial line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the pulse wave is not RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: not#$@$#RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_override_selection is provided
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_override_selection
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: provides
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the next pulse wave is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next pulse wave
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c1:]
		text:  when the RCMTECHTERM_auto_control_mode is running, the cuff will be inflated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_auto_control_mode is running, the cuff will be inflated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_auto_control_mode = runs)] ==> [(the cuff = inflates)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_auto_control_mode is running
					[2]: the cuff will be inflated
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_auto_control_mode is running
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the cuff will be inflated
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_auto_control_mode is running
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: runs
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the cuff will be inflated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cuff
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: inflates
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_34:]
		text:  when the RCMTECHTERM_auto_control_mode is running, the RCMTECHTERM_terminate_auto_control_button should be available.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_auto_control_mode is running, the RCMTECHTERM_terminate_auto_control_button should be available.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_auto_control_mode = runs)] ==> [(the RCMTECHTERM_terminate_auto_control_button = available)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_auto_control_mode is running
					[2]: the RCMTECHTERM_terminate_auto_control_button should be available
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_auto_control_mode is running
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_terminate_auto_control_button should be available
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_auto_control_mode is running
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: runs
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_terminate_auto_control_button should be available
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_terminate_auto_control_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: available
							</ArgDetails>
						</Operands>
						<Operator>
							relation:should be
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_44:]
		text:  if the pulse wave and the arterial line are unavailable, and cuff is selected, and the blood pressure is not valid, the next the manual mode is started.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the pulse wave and the arterial line are unavailable, and cuff is selected, and the blood pressure is not valid, the next the manual mode is started.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(((P) AND (Q)) AND ((R) AND (¬S)))] ==> [(T)] )
					MTL-Formula: G( [(((the pulse wave = unavailable) AND (the arterial line = unavailable)) AND ((cuff = selects) AND (¬the blood pressure = valid)))] ==> [(the next = starts)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the pulse wave are unavailable
					[2]: if the arterial line are unavailable
					[3]: if cuff is selected
					[4]: if the blood pressure is not valid
					[5]: the next is started
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave are unavailable
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line are unavailable
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if cuff is selected
					C[4]==>	Type: cond 
						SlotType= MainSlot|| Text= if the blood pressure is not valid
					C[5]==>	Type: act 
						SlotType= MainSlot|| Text= the next is started
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the pulse wave are unavailable
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: unavailable
									</ArgDetails>
								</Operands>
								<Operator>
									relation:are
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the arterial line are unavailable
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the arterial line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: unavailable
									</ArgDetails>
								</Operands>
								<Operator>
									relation:are
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if cuff is selected
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: selects
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the blood pressure is not valid
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the blood pressure
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: valid
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: true
							</Condition>
					<Action>
						Text = the next is started
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: starts
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_13c1:]
		text:  if the arterial line and the pulse wave are RCMVAL_corroborated, and the cuff is available, the next the arterial line is selected.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the arterial line and the pulse wave are RCMVAL_corroborated, and the cuff is available, the next the arterial line is selected.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(((P) AND (Q)) AND (R))] ==> [(S)] )
					MTL-Formula: G( [(((the arterial line = RCMVAL_corroborated) AND (the pulse wave = RCMVAL_corroborated)) AND (the cuff = available))] ==> [(the next = selects)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the arterial line are RCMVAL_corroborated
					[2]: if the pulse wave are RCMVAL_corroborated
					[3]: if the cuff is available
					[4]: the next is selected
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line are RCMVAL_corroborated
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave are RCMVAL_corroborated
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the cuff is available
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the next is selected
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the arterial line are RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the arterial line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:are
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the pulse wave are RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:are
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
						<Condition>
							Keyword: if
							Text = if the cuff is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the cuff
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_54:]
		text:  if RCMTECHTERM_auto_control_mode is running, and the RCMTECHTERM_impedance_reading is unavailable, the next RCMTECHTERM_auto_control_model is terminated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if RCMTECHTERM_auto_control_mode is running, and the RCMTECHTERM_impedance_reading is unavailable, the next RCMTECHTERM_auto_control_model is terminated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((RCMTECHTERM_auto_control_mode = runs) AND (the RCMTECHTERM_impedance_reading = unavailable))] ==> [(the next RCMTERMl = terminates)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if RCMTECHTERM_auto_control_mode is running
					[2]: if the RCMTECHTERM_impedance_reading is unavailable
					[3]: the next RCMTERMl is terminated
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if RCMTECHTERM_auto_control_mode is running
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_impedance_reading is unavailable
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next RCMTERMl is terminated
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if RCMTECHTERM_auto_control_mode is running
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: RCMTECHTERM_auto_control_mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: runs
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the RCMTECHTERM_impedance_reading is unavailable
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_impedance_reading
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: unavailable
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next RCMTERMl is terminated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next RCMTERMl
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: terminates
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_20:]
		text:  if the manual mode is running and the RCMTECHTERM_start_auto_control_button is pressed, the next corroboration is triggered.


		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the manual mode is running and the RCMTECHTERM_start_auto_control_button is pressed, the next corroboration is triggered.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the manual mode = runs) AND (the RCMTECHTERM_start_auto_control_button = presses))] ==> [(the next corroboration = triggers)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the manual mode is running
					[2]: if the RCMTECHTERM_start_auto_control_button is pressed
					[3]: the next corroboration is triggered
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the manual mode is running
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_start_auto_control_button is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next corroboration is triggered
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the manual mode is running
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the manual mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: runs
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the RCMTECHTERM_start_auto_control_button is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_start_auto_control_button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next corroboration is triggered
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next corroboration
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: triggers
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_32c1:]
		text:  if the pulse wave or the arterial line is available, and cuff is selected, corroboration is triggered.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the pulse wave or the arterial line is available, and cuff is selected, corroboration is triggered.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(((P) OR (Q)) AND (R))] ==> [(S)] )
					MTL-Formula: G( [(((the pulse wave = available) OR (the arterial line = available)) AND (cuff = selects))] ==> [(corroboration = triggers)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the pulse wave is available
					[2]: if the arterial line is available
					[3]: if cuff is selected
					[4]: corroboration is triggered
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is available
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if cuff is selected
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= corroboration is triggered
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<LogicalRelation>
							relation: OR
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the pulse wave is available
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: available
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the arterial line is available
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the arterial line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: available
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
						<Condition>
							Keyword: if
							Text = if cuff is selected
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: cuff
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: selects
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = corroboration is triggered
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: corroboration
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: triggers
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_42:]
		text:  when the RCMTECHTERM_auto_control_mode is running, and the arterial line or the pulse wave or cuff is lost, an alarm should sound in 60 seconds.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_auto_control_mode is running, and the arterial line or the pulse wave or cuff is lost, an alarm should sound in 60 seconds.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) OR (R) OR (S)))] ==> [(F{tNONE60}(T))] )
					MTL-Formula: G( [((the RCMTECHTERM_auto_control_mode = runs) AND ((the pulse wave cuff = loses) OR (the pulse wave cuff = loses) OR (the pulse wave cuff = loses)))] ==> [(F{tNONE60}(an alarm = sounds))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_auto_control_mode is running
					[2]: when the pulse wave cuff is lost
					[3]: an alarm should sound in 60 seconds
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_auto_control_mode is running
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the pulse wave cuff is lost
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= an alarm should sound
						SlotType= TimeScope|| Text= in 60 seconds
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Trigger>
							Keyword: when
							Text = when the RCMTECHTERM_auto_control_mode is running
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_auto_control_mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: runs
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
							is repeated = false
						</Trigger>
						<LogicalRelation>
							relation: OR
						</LogicalRelation>
							<Trigger>
								Keyword: when
								Text = when the pulse wave cuff is lost
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: loses
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
								is repeated = false
							</Trigger>
							<Trigger>
								Keyword: when
								Text = when the pulse wave cuff is lost
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: loses
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
								is repeated = false
							</Trigger>
							<Trigger>
								Keyword: when
								Text = when the pulse wave cuff is lost
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: loses
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
								is repeated = false
							</Trigger>
					<Action>
						Text = an alarm should sound
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: an alarm
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: sounds
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
						<PreElapsedTime>
							TimeType: PreElapsed
							Value: 60
							Unit: seconds
							QPRelation: 
						<FormalSemantic>
							TechnicalOperator: NONE
							Value: 60
							</FormalSemantic>
						<PreElapsedTime>
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_48c3:]
		text:  if a confirmation button is available, and the confirmation_no is pressed, the RCMTECHTERM_auto_control_mode is running.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a confirmation button is available, and the confirmation_no is pressed, the RCMTECHTERM_auto_control_mode is running.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((a confirmation button = available) AND (the confirmation_no = presses))] ==> [(the RCMTECHTERM_auto_control_mode = runs)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a confirmation button is available
					[2]: if the confirmation_no is pressed
					[3]: the RCMTECHTERM_auto_control_mode is running
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a confirmation button is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the confirmation_no is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_auto_control_mode is running
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a confirmation button is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a confirmation button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the confirmation_no is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the confirmation_no
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the RCMTECHTERM_auto_control_mode is running
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: runs
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_48c1:]
		text:  when the RCMTECHTERM_terminate_auto_control_button is selected, a confirmation button is available.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_terminate_auto_control_button is selected, a confirmation button is available.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMTECHTERM_terminate_auto_control_button = selects)] ==> [(a confirmation button = available)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_terminate_auto_control_button is selected
					[2]: a confirmation button is available
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_terminate_auto_control_button is selected
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= a confirmation button is available
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_terminate_auto_control_button is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_terminate_auto_control_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = a confirmation button is available
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: a confirmation button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: available
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c7:]
		text:  if the cuff and the arterial line and the pulse wave are not available, the next manual mode is started.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the cuff and the arterial line and the pulse wave are not available, the next manual mode is started.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((¬P) AND (¬Q))] ==> [(R)] )
					MTL-Formula: G( [((¬the cuff = available) AND (¬the arterial line = available))] ==> [(the next manual mode = starts)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the cuff are not available
					[2]: if the arterial line are not available
					[3]: the next manual mode is started
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the cuff are not available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line are not available
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next manual mode is started
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the cuff are not available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the cuff
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:are
							</Operator>
							Has valid-time:  false
							Is negatted: true
						</Condition>
						<Condition>
							Keyword: if
							Text = if the arterial line are not available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the arterial line
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:are
							</Operator>
							Has valid-time:  false
							Is negatted: true
						</Condition>
					<Action>
						Text = the next manual mode is started
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next manual mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: starts
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_48c5:]
		text:  if a confirmation button is available, and the confirmation_no is pressed, the next confirmation_no is disabled.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if a confirmation button is available, and the confirmation_no is pressed, the next confirmation_no is disabled.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((a confirmation button = available) AND (the confirmation_no = presses))] ==> [(the next confirmation_no = disabled)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if a confirmation button is available
					[2]: if the confirmation_no is pressed
					[3]: the next confirmation_no is disabled
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if a confirmation button is available
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the confirmation_no is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next confirmation_no is disabled
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if a confirmation button is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: a confirmation button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the confirmation_no is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the confirmation_no
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the next confirmation_no is disabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next confirmation_no
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: disabled
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_49:]
		text:  when the RCMTECHTERM_start_auto_control_button is enabled, the RCMTECHTERM_start_auto_control_button is enabled before it is pressed.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_start_auto_control_button is enabled, the RCMTECHTERM_start_auto_control_button is enabled before it is pressed.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [F(R) ==> (F((Q) || (R) ) U (R))] )
					MTL-Formula: G( [(the RCMTECHTERM_start_auto_control_button = enables)] ==> [F(it = presses) ==> (F((the RCMTECHTERM_start_auto_control_button = enables) || (it = presses) ) U (it = presses))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_start_auto_control_button is enabled
					[2]: the RCMTECHTERM_start_auto_control_button is enabled
					[3]: before it is pressed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_start_auto_control_button is enabled
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_start_auto_control_button is enabled
					C[3]==>	Type: actScope 
						SlotType= ConditionalScope|| Text= before it is pressed
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_start_auto_control_button is enabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_start_auto_control_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: enables
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the RCMTECHTERM_start_auto_control_button is enabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_start_auto_control_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: enables
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
						<ActionScope>
							<ConditionalScope>
								scope phase: EndUpPhase
								<Condition>
									Keyword: null
									Text = before it is pressed
									<Operands>
										Arg[0]
										<ArgDetails>
											Text: it
										</ArgDetails>
										Arg[1]
										<ArgDetails>
											Text: presses
										</ArgDetails>
									</Operands>
									<Operator>
										relation:is
									</Operator>
									Has valid-time:  false
									Is negatted: false
								</Condition>
							</ConditionalScope>
						</ActionScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_07:]
		text:  if an occlusion is detected, and the RCMTECHTERM_auto_control_mode is running, the RCMTECHTERM_auto_control_mode will be terminated.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if an occlusion is detected, and the RCMTECHTERM_auto_control_mode is running, the RCMTECHTERM_auto_control_mode will be terminated.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((an occlusion = detects) AND (the RCMTECHTERM_auto_control_mode = runs))] ==> [(the RCMTECHTERM_auto_control_mode = terminates)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if an occlusion is detected
					[2]: if the RCMTECHTERM_auto_control_mode is running
					[3]: the RCMTECHTERM_auto_control_mode will be terminated
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if an occlusion is detected
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_auto_control_mode is running
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_auto_control_mode will be terminated
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if an occlusion is detected
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: an occlusion
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: detects
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the RCMTECHTERM_auto_control_mode is running
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_auto_control_mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: runs
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the RCMTECHTERM_auto_control_mode will be terminated
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_auto_control_mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: terminates
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [r_13c3:]
		text:  if the arterial line is not RCMVAL_corroborated, and the pulse wave is not RCMVAL_corroborated, and the cuff is available, the cuff is selected.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the arterial line is not RCMVAL_corroborated, and the pulse wave is not RCMVAL_corroborated, and the cuff is available, the cuff is selected.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) AND (R)))] ==> [(S)] )
					MTL-Formula: G( [((the arterial line = not#$@$#RCMVAL_corroborated) AND ((the pulse wave = not#$@$#RCMVAL_corroborated) AND (the cuff = available)))] ==> [(the cuff = selects)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the arterial line is not RCMVAL_corroborated
					[2]: if the pulse wave is not RCMVAL_corroborated
					[3]: if the cuff is available
					[4]: the cuff is selected
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is not RCMVAL_corroborated
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave is not RCMVAL_corroborated
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the cuff is available
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the cuff is selected
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the arterial line is not RCMVAL_corroborated
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the arterial line
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: not#$@$#RCMVAL_corroborated
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the pulse wave is not RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the pulse wave
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: not#$@$#RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the cuff is available
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: available
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Action>
						Text = the cuff is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cuff
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_32c2:]
		text:  if the pulse wave is selected, and the arterial line is available, corroboration is triggered.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the pulse wave is selected, and the arterial line is available, corroboration is triggered.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the pulse wave = selects) AND (the arterial line = available))] ==> [(corroboration = triggers)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the pulse wave is selected
					[2]: if the arterial line is available
					[3]: corroboration is triggered
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave is selected
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is available
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= corroboration is triggered
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the pulse wave is selected
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the pulse wave
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: selects
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the arterial line is available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the arterial line
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = corroboration is triggered
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: corroboration
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: triggers
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c6:]
		text:  when the RCMTECHTERM_override_selection is provided, if the override_no is pressed, the next manual mode is started.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_override_selection is provided, if the override_no is pressed, the next manual mode is started.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [([(P)] ==> [(Q)])] ==> [(R)] )
					MTL-Formula: G( [([(the RCMTECHTERM_override_selection = provides)] ==> [(the override_no = presses)])] ==> [(the next manual mode = starts)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_override_selection is provided
					[2]: if the override_no is pressed
					[3]: the next manual mode is started
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_override_selection is provided
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the override_no is pressed
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the next manual mode is started
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the override_no is pressed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the override_no
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: presses
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_override_selection is provided
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_override_selection
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: provides
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the next manual mode is started
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next manual mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: starts
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c4:]
		text:  when the RCMTECHTERM_override_selection is provided, if the override_yes is pressed, and the arterial line is not RCMVAL_corroborated, the next arterial line is selected.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  when the RCMTECHTERM_override_selection is provided, if the override_yes is pressed, and the arterial line is not RCMVAL_corroborated, the next arterial line is selected.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [([(P)] ==> [((Q) AND (R))])] ==> [(S)] )
					MTL-Formula: G( [([(the RCMTECHTERM_override_selection = provides)] ==> [((the override_yes = presses) AND (the arterial line = not#$@$#RCMVAL_corroborated))])] ==> [(the next arterial line = selects)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the RCMTECHTERM_override_selection is provided
					[2]: if the override_yes is pressed
					[3]: if the arterial line is not RCMVAL_corroborated
					[4]: the next arterial line is selected
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMTECHTERM_override_selection is provided
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the override_yes is pressed
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is not RCMVAL_corroborated
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the next arterial line is selected
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the override_yes is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the override_yes
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the arterial line is not RCMVAL_corroborated
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the arterial line
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: not#$@$#RCMVAL_corroborated
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Trigger>
						Keyword: when
						Text = when the RCMTECHTERM_override_selection is provided
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMTECHTERM_override_selection
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: provides
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the next arterial line is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next arterial line
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_01:]
		text:  the cara will be operational when the RCMVAR_lstat is RCMVAL_poweredon.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  the cara will be operational when the RCMVAR_lstat is RCMVAL_poweredon.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the RCMVAR_lstat = RCMVAL_poweredon)] ==> [(the cara = operational)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: the cara will be operational
					[2]: when the RCMVAR_lstat is RCMVAL_poweredon
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the cara will be operational
					C[2]==>	Type: trig 
						SlotType= MainSlot|| Text= when the RCMVAR_lstat is RCMVAL_poweredon
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the RCMVAR_lstat is RCMVAL_poweredon
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the RCMVAR_lstat
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_poweredon
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the cara will be operational
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the cara
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: operational
							</ArgDetails>
						</Operands>
						<Operator>
							relation:will be
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_17c2:]
		text:  if the RCMTECHTERM_start_auto_control_button is pressed, and the cuff is not available, an alarm is issued and the RCMTECHTERM_override_selection is provided.
req_17c3: if the alarm_reset_button is pressed, the alarm is disabled.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the RCMTECHTERM_start_auto_control_button is pressed, and the cuff is not available, an alarm is issued and the RCMTECHTERM_override_selection is provided.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (¬Q))] ==> [((R) AND (S))] )
					MTL-Formula: G( [((the RCMTECHTERM_start_auto_control_button = presses) AND (¬the cuff = available))] ==> [((an alarm = issues) AND (the RCMTECHTERM_override_selection = provides))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the RCMTECHTERM_start_auto_control_button is pressed
					[2]: if the cuff is not available
					[3]: an alarm is issued
					[4]: the RCMTECHTERM_override_selection is provided
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the RCMTECHTERM_start_auto_control_button is pressed
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the cuff is not available
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= an alarm is issued
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the RCMTECHTERM_override_selection is provided
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the RCMTECHTERM_start_auto_control_button is pressed
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_start_auto_control_button
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: presses
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the cuff is not available
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the cuff
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: available
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: true
						</Condition>
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Action>
							Text = an alarm is issued
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: an alarm
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: issues
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
							is repeated = false
						</Action>
						<Action>
							Text = the RCMTECHTERM_override_selection is provided
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the RCMTECHTERM_override_selection
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: provides
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
							is repeated = false
						</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
			<PR>
				Id: [2]
				text: req_17c3: if the alarm_reset_button is pressed, the alarm is disabled.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the alarm_reset_button = presses)] ==> [(the alarm = disabled)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the alarm_reset_button is pressed
					[2]: the alarm is disabled
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the alarm_reset_button is pressed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the alarm is disabled
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the alarm_reset_button is pressed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the alarm_reset_button
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: presses
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the alarm is disabled
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the alarm
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: disabled
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [req_13c2:]
		text:  if the pulse wave is RCMVAL_corroborated, and the cuff is available, and the arterial line is not RCMVAL_corroborated, the next pulse wave is selected.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text:  if the pulse wave is RCMVAL_corroborated, and the cuff is available, and the arterial line is not RCMVAL_corroborated, the next pulse wave is selected.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) AND (R)))] ==> [(S)] )
					MTL-Formula: G( [((the pulse wave = RCMVAL_corroborated) AND ((the cuff = available) AND (the arterial line = not#$@$#RCMVAL_corroborated)))] ==> [(the next pulse wave = selects)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the pulse wave is RCMVAL_corroborated
					[2]: if the cuff is available
					[3]: if the arterial line is not RCMVAL_corroborated
					[4]: the next pulse wave is selected
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the pulse wave is RCMVAL_corroborated
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the cuff is available
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the arterial line is not RCMVAL_corroborated
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the next pulse wave is selected
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the pulse wave is RCMVAL_corroborated
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the pulse wave
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_corroborated
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the cuff is available
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the cuff
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: available
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the arterial line is not RCMVAL_corroborated
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the arterial line
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: not#$@$#RCMVAL_corroborated
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Action>
						Text = the next pulse wave is selected
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the next pulse wave
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: selects
							</ArgDetails>
						</Operands>
						<Operator>
							relation:is
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

</SucceededRequirement>
</log>
