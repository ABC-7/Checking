<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log SYSTEM "logger.dtd">
<log>
File Measures: 
	Number of req in file = 0
	Number of prim req in file = 36
<FailedRequirement>
</FailedRequirement>
<SucceededRequirement>
	<Requirement>
		ID: [TempReqId-1:]
		text: if the regulator mode equals RCMVAL_init , the output regulator status shall be set to RCMVAL_init .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_init , the output regulator status shall be set to RCMVAL_init .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_init)] ==> [(the output regulator status = RCMVAL_init)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_init
					[2]: the output regulator status shall be set to RCMVAL_init
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_init
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output regulator status shall be set to RCMVAL_init
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output regulator status shall be set to RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-18:]
		text: if the monitor mode equals RCMVAL_failed , the regulator mode shall never be set to RCMVAL_normal .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode equals RCMVAL_failed , the regulator mode shall never be set to RCMVAL_normal .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor mode = RCMVAL_failed)] ==> [(the regulator mode = RCMVAL_normal)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode equals RCMVAL_failed
					[2]: the regulator mode shall never be set to RCMVAL_normal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode equals RCMVAL_failed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall never be set to RCMVAL_normal
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor mode equals RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the regulator mode shall never be set to RCMVAL_normal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_normal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall never be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-28:]
		text: if the regulator interface failure is set to RCMVAL_true or the regulator internal failure is set to RCMVAL_true or the status attribute of the current temperature is not set to RCMVAL_valid , the regulator status shall be set to RCMVAL_false.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator interface failure is set to RCMVAL_true or the regulator internal failure is set to RCMVAL_true or the status attribute of the current temperature is not set to RCMVAL_valid , the regulator status shall be set to RCMVAL_false.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) OR (Q) OR (¬R))] ==> [(S)] )
					MTL-Formula: G( [((the regulator interface failure = RCMVAL_true) OR (the regulator internal failure = RCMVAL_true) OR (¬the status attribute of the current temperature = RCMVAL_valid))] ==> [(the regulator status = RCMVAL_false)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator interface failure is set to RCMVAL_true
					[2]: if the regulator internal failure is set to RCMVAL_true
					[3]: if the status attribute of the current temperature is not set to RCMVAL_valid
					[4]: the regulator status shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator interface failure is set to RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator internal failure is set to RCMVAL_true
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the current temperature is not set to RCMVAL_valid
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator status shall be set to RCMVAL_false
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: OR
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator interface failure is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator interface failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the regulator internal failure is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator internal failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the status attribute of the current temperature is not set to RCMVAL_valid
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the status attribute of the current temperature
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_valid
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: true
						</Condition>
					<Action>
						Text = the regulator status shall be set to RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-16:]
		text: if the monitor status equals RCMVAL_false , the monitor init timeout shall be set to RCMVAL_true .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor status equals RCMVAL_false , the monitor init timeout shall be set to RCMVAL_true .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor status = RCMVAL_false)] ==> [(the monitor init timeout = RCMVAL_true)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor status equals RCMVAL_false
					[2]: the monitor init timeout shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor status equals RCMVAL_false
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor init timeout shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor status equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the monitor init timeout shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor init timeout
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-26:]
		text: if the monitor mode equals RCMVAL_normal, and the temp attribute of the current temperature is less than the temp attribute of the lower temperature, or greater than the temp attribute of the upper temperature, the alarm control shall be set to RCMVAL_control_on.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode equals RCMVAL_normal, and the temp attribute of the current temperature is less than the temp attribute of the lower temperature, or greater than the temp attribute of the upper temperature, the alarm control shall be set to RCMVAL_control_on.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) OR (R)))] ==> [(S)] )
					MTL-Formula: G( [((the monitor mode = RCMVAL_normal) AND ((the temp attribute of the current temperature < the#$@$#temp#$@$#attribute of the#$@$#lower#$@$#temperature than the#$@$#temp#$@$#attribute of the#$@$#upper#$@$#temperature) OR (the temp attribute of the current temperature greater = RCMVAL_True)))] ==> [(the alarm control = RCMVAL_control_on)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode equals RCMVAL_normal
					[2]: if the temp attribute of the current temperature is less than the temp attribute of the lower temperature than the temp attribute of the upper temperature
					[3]: if the temp attribute of the current temperature greater
					[4]: the alarm control shall be set to RCMVAL_control_on
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode equals RCMVAL_normal
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the temp attribute of the current temperature is less than the temp attribute of the lower temperature than the temp attribute of the upper temperature
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the temp attribute of the current temperature greater
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the alarm control shall be set to RCMVAL_control_on
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor mode equals RCMVAL_normal
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_normal
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: OR
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the temp attribute of the current temperature is less than the temp attribute of the lower temperature than the temp attribute of the upper temperature
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the temp attribute of the current temperature
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: the#$@$#temp#$@$#attribute of the#$@$#lower#$@$#temperature than the#$@$#temp#$@$#attribute of the#$@$#upper#$@$#temperature
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is less than
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the temp attribute of the current temperature greater
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the temp attribute of the current temperature greater
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_True
									</ArgDetails>
								</Operands>
								<Operator>
									relation:equals
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Action>
						Text = the alarm control shall be set to RCMVAL_control_on
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the alarm control
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_control_on
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-14:]
		text: the monitor mode shall be initialized to RCMVAL_init .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the monitor mode shall be initialized to RCMVAL_init .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the monitor mode = RCMVAL_init)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: the monitor mode shall be initialized to RCMVAL_init
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor mode shall be initialized to RCMVAL_init
				</ClassifiedComponents>
				<RCMDetails>
					
					<Action>
						Text = the monitor mode shall be initialized to RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be initialized to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-36:]
		text: if the monitor mode is set to RCMVAL_init and the monitor init timeout is set to RCMVAL_true, the monitor mode shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode is set to RCMVAL_init and the monitor init timeout is set to RCMVAL_true, the monitor mode shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the monitor mode = RCMVAL_init) AND (the monitor init timeout = RCMVAL_true))] ==> [(the monitor mode = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode is set to RCMVAL_init
					[2]: if the monitor init timeout is set to RCMVAL_true
					[3]: the monitor mode shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode is set to RCMVAL_init
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor init timeout is set to RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor mode shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor mode is set to RCMVAL_init
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_init
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the monitor init timeout is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor init timeout
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the monitor mode shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-24:]
		text: if the status attribute of the lower temperature or the upper temperature equals RCMVAL_invalid, the monitor interface failure shall be set to RCMVAL_true.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the status attribute of the lower temperature or the upper temperature equals RCMVAL_invalid, the monitor interface failure shall be set to RCMVAL_true.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(attribute(the status))] ==> [(equal(the upper temperature))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the status attribute of the lower temperature the upper temperature equals RCMVAL_invalid
					[2]: the monitor interface failure shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the upper temperature equals
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the status attribute
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the status
							</ArgDetails>
						</Operands>
						<Operator>
							relation:attribute
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the upper temperature equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the upper temperature
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-12:]
		text: if the regulator status equals RCMVAL_true , the regulator init timeout shall be set to RCMVAL_false .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator status equals RCMVAL_true , the regulator init timeout shall be set to RCMVAL_false .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator status = RCMVAL_true)] ==> [(the regulator init timeout = RCMVAL_false)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator status equals RCMVAL_true
					[2]: the regulator init timeout shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator status equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator init timeout shall be set to RCMVAL_false
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator status equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the regulator init timeout shall be set to RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator init timeout
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-34:]
		text: if the monitor mode is set to RCMVAL_init and the monitor status is set to RCMVAL_true, the monitor mode shall be set to RCMVAL_normal .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode is set to RCMVAL_init and the monitor status is set to RCMVAL_true, the monitor mode shall be set to RCMVAL_normal .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the monitor mode = RCMVAL_init) AND (the monitor status = RCMVAL_true))] ==> [(the monitor mode = RCMVAL_normal)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode is set to RCMVAL_init
					[2]: if the monitor status is set to RCMVAL_true
					[3]: the monitor mode shall be set to RCMVAL_normal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode is set to RCMVAL_init
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor status is set to RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor mode shall be set to RCMVAL_normal
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor mode is set to RCMVAL_init
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_init
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the monitor status is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor status
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the monitor mode shall be set to RCMVAL_normal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_normal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-22:]
		text: if the regulator mode equals RCMVAL_normal , and temp attribute of the lower desired temperature exceeds the temp attribute of the current temperature , the heat control shall be set to RCMVAL_control_on .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_normal , and temp attribute of the lower desired temperature exceeds the temp attribute of the current temperature , the heat control shall be set to RCMVAL_control_on .
				<Formal-Representation>
					MTL-AbbrevatedFormula: 
					MTL-Formula: 
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_normal
					[2]: if temp attribute of the lower desired temperature exceeds the temp attribute of the current temperature
					[3]: the heat control shall be set to RCMVAL_control_on
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if temp attribute of the lower desired temperature exceeds
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator mode equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator mode
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if temp attribute of the lower desired temperature exceeds
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: temp attribute of the lower desired temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:exceeds
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-10:]
		text: the monitor interface mode shall be set to the monitor mode .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the monitor interface mode shall be set to the monitor mode .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the monitor interface mode = the#$@$#monitor#$@$#mode)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: the monitor interface mode shall be set to the monitor mode
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor interface mode shall be set to the monitor mode
				</ClassifiedComponents>
				<RCMDetails>
					
					<Action>
						Text = the monitor interface mode shall be set to the monitor mode
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor interface mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: the#$@$#monitor#$@$#mode
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-32:]
		text: if the monitor interface failure is set to RCMVAL_false and the monitor internal failure is set to RCMVAL_false and the status attribute of the current temperature is set to RCMVAL_valid, the monitor status shall be set to RCMVAL_true.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor interface failure is set to RCMVAL_false and the monitor internal failure is set to RCMVAL_false and the status attribute of the current temperature is set to RCMVAL_valid, the monitor status shall be set to RCMVAL_true.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q) AND (R))] ==> [(S)] )
					MTL-Formula: G( [((the monitor interface failure = RCMVAL_false) AND (the monitor internal failure = RCMVAL_false) AND (the status attribute of the current temperature = RCMVAL_valid))] ==> [(the monitor status = RCMVAL_true)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor interface failure is set to RCMVAL_false
					[2]: if the monitor internal failure is set to RCMVAL_false
					[3]: if the status attribute of the current temperature is set to RCMVAL_valid
					[4]: the monitor status shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor interface failure is set to RCMVAL_false
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor internal failure is set to RCMVAL_false
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the current temperature is set to RCMVAL_valid
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor status shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor interface failure is set to RCMVAL_false
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor interface failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_false
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the monitor internal failure is set to RCMVAL_false
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor internal failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_false
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the status attribute of the current temperature is set to RCMVAL_valid
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the status attribute of the current temperature
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_valid
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the monitor status shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-20:]
		text: if the status attribute of the lower desired temperature or the upper desired temperature equals RCMVAL_invalid, the regulator interface failure shall be set to RCMVAL_true.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the status attribute of the lower desired temperature or the upper desired temperature equals RCMVAL_invalid, the regulator interface failure shall be set to RCMVAL_true.
				<Formal-Representation>
					MTL-AbbrevatedFormula: 
					MTL-Formula: 
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the status attribute of the lower desired temperature equals RCMVAL_invalid
					[2]: if the upper desired temperature equals RCMVAL_invalid
					[3]: the regulator interface failure shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the lower desired temperature equals
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the upper desired temperature equals
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: OR
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the status attribute of the lower desired temperature equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the status attribute of the lower desired temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the upper desired temperature equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the upper desired temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-30:]
		text: if the regulator mode is set to RCMVAL_normal and the regulator status is set to RCMVAL_false, the regulator mode shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode is set to RCMVAL_normal and the regulator status is set to RCMVAL_false, the regulator mode shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the regulator mode = RCMVAL_normal) AND (the regulator status = RCMVAL_false))] ==> [(the regulator mode = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode is set to RCMVAL_normal
					[2]: if the regulator status is set to RCMVAL_false
					[3]: the regulator mode shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode is set to RCMVAL_normal
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator status is set to RCMVAL_false
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator mode is set to RCMVAL_normal
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_normal
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the regulator status is set to RCMVAL_false
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator status
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_false
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the regulator mode shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-3:]
		text: if the regulator mode equals RCMVAL_failed, the output regulator status shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_failed, the output regulator status shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_failed)] ==> [(the output regulator status = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_failed
					[2]: the output regulator status shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_failed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output regulator status shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output regulator status shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-5:]
		text: if the regulator mode equals RCMVAL_failed , the heat control shall be set to RCMVAL_control_off .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_failed , the heat control shall be set to RCMVAL_control_off .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_failed)] ==> [(the heat control = RCMVAL_control_off)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_failed
					[2]: the heat control shall be set to RCMVAL_control_off
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_failed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the heat control shall be set to RCMVAL_control_off
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the heat control shall be set to RCMVAL_control_off
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the heat control
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_control_off
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-7:]
		text: if the monitor interface mode equals RCMVAL_normal , the output monitor status shall be set to RCMVAL_status_on .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor interface mode equals RCMVAL_normal , the output monitor status shall be set to RCMVAL_status_on .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor interface mode = RCMVAL_normal)] ==> [(the output monitor status = RCMVAL_status_on)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor interface mode equals RCMVAL_normal
					[2]: the output monitor status shall be set to RCMVAL_status_on
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor interface mode equals RCMVAL_normal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output monitor status shall be set to RCMVAL_status_on
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor interface mode equals RCMVAL_normal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor interface mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_normal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output monitor status shall be set to RCMVAL_status_on
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_status_on
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-9:]
		text: if the monitor mode equals RCMVAL_init , the alarm control shall be set to RCMVAL_control_off .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode equals RCMVAL_init , the alarm control shall be set to RCMVAL_control_off .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor mode = RCMVAL_init)] ==> [(the alarm control = RCMVAL_control_off)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode equals RCMVAL_init
					[2]: the alarm control shall be set to RCMVAL_control_off
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode equals RCMVAL_init
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the alarm control shall be set to RCMVAL_control_off
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor mode equals RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the alarm control shall be set to RCMVAL_control_off
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the alarm control
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_control_off
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-2:]
		text: if the regulator mode equals RCMVAL_normal , the output regulator status shall be set to RCMVAL_status_on .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_normal , the output regulator status shall be set to RCMVAL_status_on .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_normal)] ==> [(the output regulator status = RCMVAL_status_on)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_normal
					[2]: the output regulator status shall be set to RCMVAL_status_on
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_normal
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output regulator status shall be set to RCMVAL_status_on
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_normal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_normal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output regulator status shall be set to RCMVAL_status_on
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_status_on
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-19:]
		text: when the reset equals RCMVAL_true , the regulator mode shall be set to RCMVAL_init .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: when the reset equals RCMVAL_true , the regulator mode shall be set to RCMVAL_init .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the reset = RCMVAL_true)] ==> [(the regulator mode = RCMVAL_init)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: when the reset equals RCMVAL_true
					[2]: the regulator mode shall be set to RCMVAL_init
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: trig 
						SlotType= MainSlot|| Text= when the reset equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall be set to RCMVAL_init
				</ClassifiedComponents>
				<RCMDetails>
					
					<Trigger>
						Keyword: when
						Text = when the reset equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the reset
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Trigger>
					<Action>
						Text = the regulator mode shall be set to RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-29:]
		text: if the regulator mode equals RCMVAL_init and the regulator status equals RCMVAL_true, the regulator mode shall be set to RCMVAL_normal.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_init and the regulator status equals RCMVAL_true, the regulator mode shall be set to RCMVAL_normal.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(equal(the regulator mode))] ==> [(equal(the regulator status))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals equals RCMVAL_true
					[2]: if equals RCMVAL_init equals RCMVAL_true
					[3]: if equals the regulator status equals RCMVAL_true
					[4]: the regulator mode shall be set to RCMVAL_normal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if equals RCMVAL_init equals
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator status equals
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if equals
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the regulator status equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator status
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-17:]
		text: if the regulator mode equals RCMVAL_failed , the regulator mode shall never be set to RCMVAL_normal .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_failed , the regulator mode shall never be set to RCMVAL_normal .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_failed)] ==> [(the regulator mode = RCMVAL_normal)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_failed
					[2]: the regulator mode shall never be set to RCMVAL_normal
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_failed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall never be set to RCMVAL_normal
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the regulator mode shall never be set to RCMVAL_normal
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_normal
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall never be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-27:]
		text: if the regulator interface failure is set to RCMVAL_false, and the regulator internal failure is set to RCMVAL_false, and the status attribute of the current temperature is set to RCMVAL_valid, the regulator status shall be set to RCMVAL_true.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator interface failure is set to RCMVAL_false, and the regulator internal failure is set to RCMVAL_false, and the status attribute of the current temperature is set to RCMVAL_valid, the regulator status shall be set to RCMVAL_true.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND ((Q) AND (R)))] ==> [(S)] )
					MTL-Formula: G( [((the regulator interface failure = RCMVAL_false) AND ((the regulator internal failure = RCMVAL_false) AND (the status attribute of the current temperature = RCMVAL_valid)))] ==> [(the regulator status = RCMVAL_true)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator interface failure is set to RCMVAL_false
					[2]: if the regulator internal failure is set to RCMVAL_false
					[3]: if the status attribute of the current temperature is set to RCMVAL_valid
					[4]: the regulator status shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator interface failure is set to RCMVAL_false
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator internal failure is set to RCMVAL_false
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the current temperature is set to RCMVAL_valid
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator status shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator interface failure is set to RCMVAL_false
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator interface failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_false
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<LogicalRelation>
							relation: AND
						</LogicalRelation>
							<Condition>
								Keyword: if
								Text = if the regulator internal failure is set to RCMVAL_false
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the regulator internal failure
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_false
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is set to
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
							<Condition>
								Keyword: if
								Text = if the status attribute of the current temperature is set to RCMVAL_valid
								<Operands>
									Arg[0]
									<ArgDetails>
										Text: the status attribute of the current temperature
									</ArgDetails>
									Arg[1]
									<ArgDetails>
										Text: RCMVAL_valid
									</ArgDetails>
								</Operands>
								<Operator>
									relation:is set to
								</Operator>
								Has valid-time:  false
								Is negatted: false
							</Condition>
					<Action>
						Text = the regulator status shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-15:]
		text: if the monitor status equals RCMVAL_true , the monitor init timeout shall be set to RCMVAL_false .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor status equals RCMVAL_true , the monitor init timeout shall be set to RCMVAL_false .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor status = RCMVAL_true)] ==> [(the monitor init timeout = RCMVAL_false)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor status equals RCMVAL_true
					[2]: the monitor init timeout shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor status equals RCMVAL_true
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor init timeout shall be set to RCMVAL_false
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor status equals RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the monitor init timeout shall be set to RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor init timeout
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-25:]
		text: if the status attribute of the lower temperature and the upper temperature equals RCMVAL_valid, the monitor interface failure shall be set to RCMVAL_false.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the status attribute of the lower temperature and the upper temperature equals RCMVAL_valid, the monitor interface failure shall be set to RCMVAL_false.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(attribute(the status))] ==> [(equal(the upper temperature))] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the status attribute of the lower temperature the upper temperature equals RCMVAL_valid
					[2]: the monitor interface failure shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the upper temperature equals
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the status attribute
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the status
							</ArgDetails>
						</Operands>
						<Operator>
							relation:attribute
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the upper temperature equals
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the upper temperature
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-13:]
		text: if the regulator status equals RCMVAL_false , the regulator init timeout shall be set to RCMVAL_true .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator status equals RCMVAL_false , the regulator init timeout shall be set to RCMVAL_true .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator status = RCMVAL_false)] ==> [(the regulator init timeout = RCMVAL_true)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator status equals RCMVAL_false
					[2]: the regulator init timeout shall be set to RCMVAL_true
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator status equals RCMVAL_false
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator init timeout shall be set to RCMVAL_true
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator status equals RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the regulator init timeout shall be set to RCMVAL_true
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator init timeout
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_true
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-35:]
		text: if the monitor mode is set to RCMVAL_normal and the monitor status is set to RCMVAL_false, the monitor mode shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor mode is set to RCMVAL_normal and the monitor status is set to RCMVAL_false, the monitor mode shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the monitor mode = RCMVAL_normal) AND (the monitor status = RCMVAL_false))] ==> [(the monitor mode = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor mode is set to RCMVAL_normal
					[2]: if the monitor status is set to RCMVAL_false
					[3]: the monitor mode shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor mode is set to RCMVAL_normal
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor status is set to RCMVAL_false
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor mode shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor mode is set to RCMVAL_normal
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_normal
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the monitor status is set to RCMVAL_false
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor status
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_false
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the monitor mode shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-23:]
		text: if the regulator mode equals RCMVAL_normal , and the temp attribute of the current temperature exceeds the temp attribute of the upper desired temperature , the heat control shall be set to RCMVAL_control_off .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_normal , and the temp attribute of the current temperature exceeds the temp attribute of the upper desired temperature , the heat control shall be set to RCMVAL_control_off .
				<Formal-Representation>
					MTL-AbbrevatedFormula: 
					MTL-Formula: 
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_normal
					[2]: if the temp attribute of the current temperature exceeds the temp attribute of the upper desired temperature
					[3]: the heat control shall be set to RCMVAL_control_off
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the temp attribute of the current temperature exceeds
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator mode equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator mode
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the temp attribute of the current temperature exceeds
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the temp attribute of the current temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:exceeds
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-11:]
		text: the regulator mode shall be initialized to RCMVAL_init .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: the regulator mode shall be initialized to RCMVAL_init .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_init)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: the regulator mode shall be initialized to RCMVAL_init
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall be initialized to RCMVAL_init
				</ClassifiedComponents>
				<RCMDetails>
					
					<Action>
						Text = the regulator mode shall be initialized to RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be initialized to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-33:]
		text: if the monitor interface failure is set to RCMVAL_true or the monitor internal failure is set to RCMVAL_true or the status attribute of the current temperature is not set to RCMVAL_valid , the monitor status shall be set to RCMVAL_false.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor interface failure is set to RCMVAL_true or the monitor internal failure is set to RCMVAL_true or the status attribute of the current temperature is not set to RCMVAL_valid , the monitor status shall be set to RCMVAL_false.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) OR (Q) OR (¬R))] ==> [(S)] )
					MTL-Formula: G( [((the monitor interface failure = RCMVAL_true) OR (the monitor internal failure = RCMVAL_true) OR (¬the status attribute of the current temperature = RCMVAL_valid))] ==> [(the monitor status = RCMVAL_false)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor interface failure is set to RCMVAL_true
					[2]: if the monitor internal failure is set to RCMVAL_true
					[3]: if the status attribute of the current temperature is not set to RCMVAL_valid
					[4]: the monitor status shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor interface failure is set to RCMVAL_true
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor internal failure is set to RCMVAL_true
					C[3]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the current temperature is not set to RCMVAL_valid
					C[4]==>	Type: act 
						SlotType= MainSlot|| Text= the monitor status shall be set to RCMVAL_false
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: OR
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the monitor interface failure is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor interface failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the monitor internal failure is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the monitor internal failure
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the status attribute of the current temperature is not set to RCMVAL_valid
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the status attribute of the current temperature
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_valid
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: true
						</Condition>
					<Action>
						Text = the monitor status shall be set to RCMVAL_false
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_false
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-21:]
		text: if the status attribute of the lower desired temperature and the upper desired temperature equals RCMVAL_valid, the regulator interface failure shall be set to RCMVAL_false.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the status attribute of the lower desired temperature and the upper desired temperature equals RCMVAL_valid, the regulator interface failure shall be set to RCMVAL_false.
				<Formal-Representation>
					MTL-AbbrevatedFormula: 
					MTL-Formula: 
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the status attribute of the lower desired temperature equals RCMVAL_valid
					[2]: if the upper desired temperature equals RCMVAL_valid
					[3]: the regulator interface failure shall be set to RCMVAL_false
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the status attribute of the lower desired temperature equals
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the upper desired temperature equals
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the status attribute of the lower desired temperature equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the status attribute of the lower desired temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the upper desired temperature equals
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the upper desired temperature
								</ArgDetails>
							</Operands>
							<Operator>
								relation:equals
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-31:]
		text: if the regulator mode is set to RCMVAL_init and the regulator init timeout is set to RCMVAL_true, the regulator mode shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode is set to RCMVAL_init and the regulator init timeout is set to RCMVAL_true, the regulator mode shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [((P) AND (Q))] ==> [(R)] )
					MTL-Formula: G( [((the regulator mode = RCMVAL_init) AND (the regulator init timeout = RCMVAL_true))] ==> [(the regulator mode = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode is set to RCMVAL_init
					[2]: if the regulator init timeout is set to RCMVAL_true
					[3]: the regulator mode shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode is set to RCMVAL_init
					C[2]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator init timeout is set to RCMVAL_true
					C[3]==>	Type: act 
						SlotType= MainSlot|| Text= the regulator mode shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<LogicalRelation>
						relation: AND
					</LogicalRelation>
						<Condition>
							Keyword: if
							Text = if the regulator mode is set to RCMVAL_init
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator mode
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_init
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
						<Condition>
							Keyword: if
							Text = if the regulator init timeout is set to RCMVAL_true
							<Operands>
								Arg[0]
								<ArgDetails>
									Text: the regulator init timeout
								</ArgDetails>
								Arg[1]
								<ArgDetails>
									Text: RCMVAL_true
								</ArgDetails>
							</Operands>
							<Operator>
								relation:is set to
							</Operator>
							Has valid-time:  false
							Is negatted: false
						</Condition>
					<Action>
						Text = the regulator mode shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-4:]
		text: if the regulator mode equals RCMVAL_init, the heat control shall be set to RCMVAL_control_off.

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the regulator mode equals RCMVAL_init, the heat control shall be set to RCMVAL_control_off.
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the regulator mode = RCMVAL_init)] ==> [(the heat control = RCMVAL_control_off)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the regulator mode equals RCMVAL_init
					[2]: the heat control shall be set to RCMVAL_control_off
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the regulator mode equals RCMVAL_init
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the heat control shall be set to RCMVAL_control_off
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the regulator mode equals RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the regulator mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the heat control shall be set to RCMVAL_control_off
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the heat control
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_control_off
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-6:]
		text: if the monitor interface mode equals RCMVAL_init , the output monitor status shall be set to RCMVAL_init .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor interface mode equals RCMVAL_init , the output monitor status shall be set to RCMVAL_init .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor interface mode = RCMVAL_init)] ==> [(the output monitor status = RCMVAL_init)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor interface mode equals RCMVAL_init
					[2]: the output monitor status shall be set to RCMVAL_init
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor interface mode equals RCMVAL_init
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output monitor status shall be set to RCMVAL_init
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor interface mode equals RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor interface mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output monitor status shall be set to RCMVAL_init
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_init
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

	<Requirement>
		ID: [TempReqId-8:]
		text: if the monitor interface mode equals RCMVAL_failed , the output monitor status shall be set to RCMVAL_failed .

		<PrimitiveReq>
			<PR>
				Id: [1]
				text: if the monitor interface mode equals RCMVAL_failed , the output monitor status shall be set to RCMVAL_failed .
				<Formal-Representation>
					MTL-AbbrevatedFormula: G( [(P)] ==> [(Q)] )
					MTL-Formula: G( [(the monitor interface mode = RCMVAL_failed)] ==> [(the output monitor status = RCMVAL_failed)] )
				</Formal-Representation>
				<ExtractedComponents>
					[1]: if the monitor interface mode equals RCMVAL_failed
					[2]: the output monitor status shall be set to RCMVAL_failed
				</ExtractedComponents>
				<ClassifiedComponents>
					C[1]==>	Type: cond 
						SlotType= MainSlot|| Text= if the monitor interface mode equals RCMVAL_failed
					C[2]==>	Type: act 
						SlotType= MainSlot|| Text= the output monitor status shall be set to RCMVAL_failed
				</ClassifiedComponents>
				<RCMDetails>
					
					<Condition>
						Keyword: if
						Text = if the monitor interface mode equals RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the monitor interface mode
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:equals
						</Operator>
						Has valid-time:  false
						Is negatted: false
					</Condition>
					<Action>
						Text = the output monitor status shall be set to RCMVAL_failed
						<Operands>
							Arg[0]
							<ArgDetails>
								Text: the output monitor status
							</ArgDetails>
							Arg[1]
							<ArgDetails>
								Text: RCMVAL_failed
							</ArgDetails>
						</Operands>
						<Operator>
							relation:shall be set to
						</Operator>
						Has valid-time:  false
						Is negatted: false
						is repeated = false
					</Action>
					<RequirementScope>
					</RequirementScope>
				</RCMDetails>
			</PR>
		</PrimitiveReq>
	</Requirement>

</SucceededRequirement>
</log>
